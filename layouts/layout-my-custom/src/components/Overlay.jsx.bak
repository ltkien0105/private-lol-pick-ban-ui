import { useState } from 'react';
import cx from 'classnames';

import css from '../style/index.module.css';
import Bans from './Bans';
import Pick from './Pick';
import logo from '../assets/Logo_Itemania_2019.png';

export default function Overlay({ state, config }) {
    const [currentAnimation, setCurrentAnimation] = useState("");
    const [openingAnimationPlayed, setOpeningAnimationPlayed] = useState(false);

    const playOpeningAnimation = () => {
        setOpeningAnimationPlayed(true);
        setTimeout(() => {
            setCurrentAnimation(css.AnimationHidden);
            setTimeout(() => {
                setCurrentAnimation(css.AnimationTimer + ' ' + css.AnimationBansPick);
                setTimeout(() => {
                    setCurrentAnimation(css.AnimationBansPick + ' ' + css.AnimationBansPickOnly);
                    setTimeout(() => {
                        setCurrentAnimation(css.AnimationPigs);
                    }, 1000);
                }, 1450);
            }, 700);
        }, 500);
    };
    
    if (state.champSelectActive && !openingAnimationPlayed) {
        playOpeningAnimation();
    }

    if (!state.champSelectActive && openingAnimationPlayed) {
        setOpeningAnimationPlayed(false);
        setCurrentAnimation(css.TheAbsoluteVoid);
    }

    const renderBans = (teamState) =>{
        const list =  teamState.bans.map((ban, idx) => <Bans key={`ban-${idx}`} {...ban} />);
        list.splice(3, 0, <div key="ban-spacer" className={css.Spacing} />);
        return <div className={cx(css.BansBox)}>{list}</div>;
    };

    const renderTeam = (teamName, teamConfig, teamState) => (
        <div className={cx(css.Team, teamName)}>
            <div className={cx(css.Picks)}>
                {teamState.picks.map((pick, idx) => <Pick key={`pick-${idx}`} config={config} {...pick} />)}
            </div>
            <div className={css.BansWrapper}>
                <div className={cx(css.Bans, {[css.WithScore]: config.frontend.scoreEnabled})}>
                    {teamName === css.TeamBlue && config.frontend.scoreEnabled && <div className={css.TeamScore}>
                        {teamConfig.score}
                    </div>}
                    {teamName === css.TeamRed && renderBans(teamState)}
                    <div className={cx(css.TeamName, {[css.WithoutCoaches]: !config.frontend.coachesEnabled})}>
                        {teamConfig.name}
                        {config.frontend.coachesEnabled && <div className={css.CoachName}>
                            Coach: {teamConfig.coach}
                        </div>}
                    </div>
                    {teamName === css.TeamBlue && renderBans(teamState)}
                    {teamName === css.TeamRed && config.frontend.scoreEnabled && <div className={css.TeamScore}>
                        {teamConfig.score}
                    </div>}
                </div>
            </div>
        </div>
    );

    return (
        <div className={cx(css.Overlay, css.Europe, currentAnimation)} style={{"--color-red": config.frontend.redTeam.color, "--color-blue": config.frontend.blueTeam.color}}>
            {Object.keys(state).length === 0 && <div className={cx(css.infoBox)}>Not connected to backend service!</div>}
            {Object.keys(state).length !== 0 &&
            <div className={cx(css.ChampSelect)}>
                {!state.leagueConnected && <div className={cx(css.infoBox)}>Not connected to client!</div> }
                <div className={cx(css.MiddleBox)}>
                    <div className={cx(css.Logo)}>
                        <img src={logo} alt="" />
                    </div>
                    <div className={cx(css.Patch)}>
                        {state.state}
                    </div>
                    <div className={cx(css.Timer, {
                        [`${css.Red} ${css.Blue}`]: !state.blueTeam.isActive && !state.redTeam.isActive,
                        [css.Blue]: state.blueTeam.isActive,
                        [css.Red]: state.redTeam.isActive
                    })}>
                        <div className={cx(css.Background, css.Blue)} />
                        <div className={cx(css.Background, css.Red)} />
                        {state.timer < 100 && <div className={cx(css.TimerChars)}>
                            {state.timer.toString().split('').map((char, idx) => <div key={`div-${idx}`}
                                className={cx(css.TimerChar)}>{char}</div>)}
                        </div>}
                        {state.timer >= 100 && <div className={cx(css.TimerChars)}>
                            {state.timer}
                        </div>}
                    </div>
                </div>
                {renderTeam(css.TeamBlue, config.frontend.blueTeam, state.blueTeam)}
                {renderTeam(css.TeamRed, config.frontend.redTeam, state.redTeam)}
            </div>}
        </div>
    )
}